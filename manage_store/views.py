import datetime
import time
from urllib.parse import quote

from django.contrib.auth import authenticate, login
from django.contrib.auth.forms import AuthenticationForm
from django.urls import reverse_lazy
from loguru import logger

from django.http import FileResponse, HttpResponse
from django.shortcuts import render, get_object_or_404, redirect
from django.views import View

from manage_groha_store.settings import MEDIA_ROOT
from manage_store.forms import UploadProductFilesForm, AddCategoryForm
from manage_store.models import ProductFiles, Category, ProjectSettings


class DownloadProductFileView(View):
    """
    –í—å—é—à–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ - —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.
    """

    def get(self, request, file_hash, format=None):
        """
        –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞.
        """
        # –ù–∞—Ö–æ–¥–∏–º —Ñ–∞–π–ª –≤ –ë–î
        prod_file_obj = get_object_or_404(klass=ProductFiles, file_hash=file_hash)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–º—É –≤—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è
        try:
            time_to_delete = int(ProjectSettings.objects.get(key='time_to_delete').value) * 60
        except Exception as error:
            logger.warning(f'–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ time_to_delete, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ 32 —á–∞—Å–∞.\n'
                           f'–û—à–∏–±–∫–∞:\n{error}')
            time_to_delete = 32 * 60 * 60

        prod_file_obj.time_for_delete = time.time() + time_to_delete
        prod_file_obj.is_sold = True
        prod_file_obj.save()

        download_file = open(prod_file_obj.file.path, 'rb')
        response = FileResponse(download_file)
        response['content-disposition'] = f'attachment; filename={quote(prod_file_obj.origin_file_name)}'
        return response


class UploadProductFilesView(View):
    """
    –í—å—é—à–∫–∞ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤-—Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.
    """
    def get(self, request):
        """
        –û—Ç–¥–∞—ë–º —Å—Ç—Ä–∞–Ω–∏—á–∫—É —Å —Ñ–æ—Ä–º–æ–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.
        """
        # –†–µ–¥–∏—Ä–µ–∫—Ç, –µ—Å–ª–∏ –Ω–µ–∑–∞–ª–æ–≥–∏–Ω–µ–Ω
        if not request.user.is_superuser or not request.user.is_staff:
            return redirect(to=reverse_lazy('manage_store:login'))

        context = {
            'file_form': UploadProductFilesForm(),
            'category_form': AddCategoryForm(),
        }
        return render(request=request, template_name='manage_store/upload_files.html', context=context)

    def post(self, request):
        """
        –í—å—é—à–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤.
        """
        # –†–µ–¥–∏—Ä–µ–∫—Ç, –µ—Å–ª–∏ –Ω–µ–∑–∞–ª–æ–≥–∏–Ω–µ–Ω
        if not request.user.is_superuser or not request.user.is_staff:
            return redirect(to=reverse_lazy('manage_store:login'))

        file_form = UploadProductFilesForm(request.POST, request.FILES)

        if file_form.is_valid():
            # –ï—Å–ª–∏ –ø–∞–ø–∫–∞ –Ω–µ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞
            if file_form.cleaned_data.get("category") == '0':
                context = {
                    'file_form': file_form.add_error(field='category', error='–°–ø–µ—Ä–≤–∞ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É'),
                    'category_form': AddCategoryForm(),
                }
                return HttpResponse(status=400, content='‚òùÔ∏è–û—à–∏–±–∫–∞. –°–ø–µ—Ä–≤–∞ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—ÉüìÅ')

            # –ü–æ–ª—É—á–∞–µ–º –Ω—É–∂–Ω—É—é –ø–∞–ø–∫—É
            try:
                cat_obj = Category.objects.get(pk=file_form.cleaned_data.get("category"))
            except Exception as error:
                logger.warning(f'–ü—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞. –û—à–∏–±–∫–∞: {error}\n–ó–∞–ø—Ä–æ—Å:{request.POST}')
                context = {
                    'file_form': file_form.add_error(field='category', error='–¢–∞–∫–æ–π –ø–∞–ø–∫–∏ –Ω–µ—Ç.'),
                    'category_form': AddCategoryForm(),
                }
                return render(request=request, template_name='manage_store/upload_files.html', context=context)

            dwnld_links_lst = []    # –°–ø–∏—Å–æ–∫ –¥–ª—è —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ [(origin_file_name, download_link)]
            for i_file in request.FILES.getlist('files'):
                try:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã —Ç–æ–≤–∞—Ä–æ–≤
                    i_prod_file_obj = ProductFiles.objects.create(
                        origin_file_name=i_file.name,
                        file=i_file,
                        category=cat_obj,
                    )
                    logger.success(f'–§–∞–π–ª {i_file.name} —Å–æ—Ö—Ä–∞–Ω—ë–Ω.')
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏ —Å—Å—ã–ª–∫—É –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫
                    dwnld_links_lst.append((i_prod_file_obj.origin_file_name, i_prod_file_obj.download_link))
                except Exception as error:
                    logger.warning(f'–§–∞–π–ª {i_file.name} –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:\n{error}')

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Å—ã–ª–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
            links_lst_path = f'{MEDIA_ROOT}/work_files/links_lst{datetime.datetime.now().strftime("%d.%m.%Y_%H:%M:%S")}'
            with open(links_lst_path, 'w', encoding='utf-8') as links_file:
                for i_link in dwnld_links_lst:
                    links_file.write(f'{i_link[1]}\n')

            # "–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª" —Å–æ —Å–ø–∏—Å–∫–æ–º —Å—Å—ã–ª–æ–∫ –≤ –ë–î
            cat_obj = Category.objects.get_or_create(    # –°–æ–∑–¥–∞—ë–º –∏–ª–∏ –¥–æ—Å—Ç–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è —Å–ø–∏—Å–∫–æ–≤ —Å—Å—ã–ª–æ–∫
                    cat_name='—Ñ–∞–π–ª—ã —Å–æ —Å–ø–∏—Å–∫–æ–º —Å—Å—ã–ª–æ–∫',
                    defaults={
                        "cat_name": "—Ñ–∞–π–ª—ã —Å–æ —Å–ø–∏—Å–∫–æ–º —Å—Å—ã–ª–æ–∫",
                    }
                )[0]
            links_file_obj = ProductFiles.objects.create(
                origin_file_name=links_lst_path.split('/')[-1],
                file=links_lst_path,
                is_links_list=True,
                category=cat_obj,
            )

            # –î–∞—ë–º –æ—Ç–≤–µ—Ç
            return render(
                request=request,
                template_name='manage_store/upload_files_rslt.html',
                context={'links_file': links_file_obj},
            )
        else:
            return HttpResponse(content='–ü–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é', status=400)


def add_category_view(request):
    """
    –í—å—é—à–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ø–∞–ø–∫–∏)
    """
    # –†–µ–¥–∏—Ä–µ–∫—Ç, –µ—Å–ª–∏ –Ω–µ–∑–∞–ª–æ–≥–∏–Ω–µ–Ω
    if not request.user.is_superuser or not request.user.is_staff:
        return redirect(to=reverse_lazy('manage_store:login'))

    if request.method == 'POST':
        form = AddCategoryForm(request.POST)
        if form.is_valid():
            try:
                Category.objects.create(
                    cat_name=form.cleaned_data.get("cat_name")
                )
                logger.success(f'–£—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å cat_name == {form.cleaned_data.get("cat_name")}')
            except Exception as error:
                logger.warning(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {error}')
                return HttpResponse(status=400, content='–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö')
            return redirect(reverse_lazy('manage_store:upload'))
        return HttpResponse(status=400, content='–î–∞–Ω–Ω—ã–µ, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º—É –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é')
    else:
        return HttpResponse(status=400)


class MyLoginView(View):
    """
    –í—å—é—à–∫–∞ –¥–ª—è –ª–æ–≥–∏–Ω–∞
    """

    def get(self, request):
        if request.user.is_authenticated:
            return redirect(reverse_lazy('manage_store:head_page'))

        return render(request, 'manage_store/login.html', context={
            'form': AuthenticationForm(),
        })

    def post(self, request):

        username = request.POST.get("username")
        password = request.POST.get("password")
        user = authenticate(request=request, username=username, password=password)  # –≤–µ—Ä–Ω—ë—Ç None –∏–ª–∏ –æ–±—ä–µ–∫—Ç User
        if user:
            login(request=request, user=user)
            return redirect(reverse_lazy('manage_store:head_page'))

        return render(request, "manage_store/login.html", context={
            "error": "–ù–µ–≤–µ—Ä–Ω—ã–µ –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å",
            "form": AuthenticationForm(),
        })
